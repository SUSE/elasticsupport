#!/usr/bin/env ruby
#
# Import a supportconfig into elasticsearch
#
# Index    (Database) Elasticsupport
# Type     (Table)    rpm
# Id
# Document (Row)      package name
# Field    (Column)   nevra

require 'rubygems'
require 'rubygems/package' # TarReader
require 'bzip2/bzip2'
require 'elasticsupport'

def usage(msg=nil)
  STDERR.puts "*** Err: #{msg}" if msg
  STDERR.puts "Usage:"
  STDERR.puts "elasticsupport <dir>"
  STDERR.puts "\t<dir> => unpacked supportconfig tarball"
  exit 1
end

#
# parse_supportconfig from directory (unpacked) or TarReader (tbz stream)
#

def parse_supportconfig handle
#  puts "Supportconfig: #{handle}"
  elasticsupport = Elasticsupport::Elasticsupport.new handle
  elasticsupport.index [ "basic-environment.txt", "rpm.txt" ] # , "hardware.txt"
end

def parse_tarball file
  # assume tarball
  puts "Assume #{file} is a tarball"
  begin
    uncompressed = Gem::Package::TarReader.new(Zlib::GzipReader.open(file))
  rescue Zlib::GzipFile::Error
    uncompressed = Gem::Package::TarReader.new(Bzip2::Reader.open(file))
  rescue
    STDERR.puts "#{file} is not a tarball"
    raise
  end
  parse_supportconfig uncompressed
end

def parse_argument arg
  # try <dir>/supportconfig.txt
  if File.readable?(File.join(arg, "supportconfig.txt"))
    # assume unpackage supportconfig
    parse_supportconfig arg
  elsif File.directory?(arg)
    # look inside dir
    Dir.open(arg).each do |f|
      next if f[0,1] == "."
      parse_argument File.join(arg, f)
    end
  elsif File.readable?(arg)
    parse_tarball(arg)
  else
    STDERR.puts "'#{arg}' is neither a directory nor a tarball"
  end
end

arg = ARGV.shift

usage "<arg> parameter missing" unless arg

parse_argument arg
