#
# SUSE Manager
#


filter {

  # rhn_web_api java traceback continuation lines
  if ([message] =~ "(^\tat\s|^\tat\s|^\<)" ) { drop {} }
  if ([message] =~ "^[\w\s]+.*") { drop {} }

  # XmlRpcFault from rhn_web_api ?
  if ([message] =~ "(^redstone.xmlrpc.XmlRpcFault:)") {
    mutate {
      add_tag => [ "XmlRpcFault" ]
    }
  }

  if ([type] == "rhn_web_api") {
    # Spacewalk rhn_web_api.log
    if ("XmlRpcFault" in [tags]) {
      grok {
        patterns_dir => "."
        patterns_files_glob => "*.pattern"
        match => { "message" => "%{XMLRPCFAULT}" }
      }
    }
    else {

      grok {
        # [2015-04-01 14:17:13,420] INFO  - REQUESTED FROM: 127.0.0.1 CALL: api.getVersion() CALLER: (none) TIME: 0.006 seconds
        # [2015-07-03 11:40:33,378] ERROR - REQUESTED FROM: 10.122.53.112 CALL: proxy.list_available_proxy_channels(<?xml version=\"1.0\"?>
        # [2016-06-27 10:32:38,489] ERROR - REQUESTED FROM: 10.10.191.100 CALL: sync.content.synchronizeChannels(260x7aa024b4cdf93293f923f1bddcbba29e, ) CALLER: (admin) TIME: 0.019 seconds
        patterns_dir => "."
        patterns_files_glob => "*.pattern"
        match => { "message" => "\[%{RHNTIMESTAMP:timestamp}\] %{LOGLEVEL:loglevel}\s+- %{CLIENT} CALL: %{API:api}\(%{RHNARGS:args}\)( CALLER: \(%{API:caller}\))?( %{DURATION})?" }
      }
      date {
        # http://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
        target => "@timestamp"
        locale => "en"
      }
    }
  }
  elseif ([type] == "access_log") {
    # apache2 access_log

    grok {
      # 10.122.53.112 - - [10/Jul/2016:14:15:12 +0200] "POST /XMLRPC HTTP/1.1" 200 126
      match => { "message" => "%{COMMONAPACHELOG}( %{QUOTEDSTRING:referer})?( %{QUOTEDSTRING:agent})?" }
    }
    date {
      # 10/Jul/2016:14:15:40 +0200
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
      target => "@timestamp"
      locale => "en"
    }
  }
  elseif ([type] == "error_log") {
    # apache2 error_log


    grok {
      match => { "message" => "%{HTTPD_ERRORLOG}" }
    }
    date {
      # [Thu Apr 28 17:55:50 2016]
      match => [ "timestamp" , "EEE MMM dd HH:mm:ss yyyy" ]
      target => "@timestamp"
      locale => "en"
    }
    mutate {
      add_tag => [ "%{loglevel}" ]
    }
  }
  elseif ([type] == "osa-dispatcher") {
    # osa-dispatcher.log

    grok {
      # 2015/06/12 11:39:04 +02:00 14117 0.0.0.0: osad/jabber_lib.main('ERROR', 'Error caught:')
      patterns_dir => "."
      patterns_files_glob => "*.pattern"
      match => { "message" => "%{TIMESTAMP:timestamp} %{PID:pid:int} %{IP:clientip}: %{MODULE:module}/%{FUNCTION:function}(%{OSAARGS:args})?" }
    }
    date {
      # 2015/06/12 11:39:04 +02:00
      match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss Z" ]
      target => "@timestamp"
      locale => "en"
    }
  }
  elseif ([type] == "rhn_server_sat") {
    # rhn_server_sat.log

    grok {
      # 2016/06/27 09:32:18 +02:00 31345 0.0.0.0: server/apacheHandler.headerParserHandler('POST /SAT HTTP/1.1',)
      # -> see osa-dispatcher
      patterns_dir => "."
      patterns_files_glob => "*.pattern"
      match => { "message" => "%{TIMESTAMP:timestamp} %{PID:pid:int} %{IP:clientip}: %{MODULE:module}/%{FUNCTION:function}(%{OSAARGS:args})?" }
    }
    date {
      # 2015/06/12 11:39:04 +02:00
      match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss Z" ]
      target => "@timestamp"
      locale => "en"
    }
  }
  elseif ("log4j" in [tags]) {
    # do nothing
  }
  else {
    grok {
      match => { "message" => ".*" }
    }
    mutate {
      add_tag => [ "_grokparsefailure" ]
    }
  }

  if ("elasticsupport" in [tags]) {
    mutate {
    # host and port are from the elasticsupport system and thus useless
    # timestamp was converted to @timestamp
      remove_field => ["host", "port", "timestamp"]
    }
  }

}
