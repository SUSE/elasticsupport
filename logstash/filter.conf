#
# SUSE Manager
#
# access_log
# error_log
# rhn_web_api.log
# osa-dispatcher.log

filter {

  # rhn_web_api java traceback continuation lines
  if ([message] =~ "(^\tat\s|^\tat\s|^\<)" ) { drop {} }
  if ([message] =~ "^[\w\s]+: .*") { drop {} }

  # osa-dispatcher ?
  if ([message] =~ "(:\sosad\/)") {
    mutate {
      add_tag => [ "osa-dispatcher" ]
      replace => { "type" => "osa-dispatcher" }
    }
  }

  # rhn_web_api ?
  if ([message] =~ "(^\[\d\d\d\d\-\d\d\-\d\d\s)") {
    mutate {
      add_tag => [ "rhn_web_api" ]
      replace => { "type" => "rhn_web_api" }
    }
  }

  # access_log ?
  if ([message] =~ "(^[^\]]+\[\d+\/\w+\/\d+:\d+:\d+:\d+\s[+-]\d+\])") {
    mutate {
      add_tag => [ "access_log" ]
      replace => { "type" => "access_log" }
    }
  }

  # error_log ?
  if ([message] =~ "(^\[\w\w\w\s\w\w\w\s\d\d)") {
    mutate {
      add_tag => [ "error_log" ]
      replace => { "type" => "error_log" }
    }
  }

  # XmlRpcFault from rhn_web_api ?
  if ([message] =~ "(^redstone.xmlrpc.XmlRpcFault:)") {
    mutate {
      add_tag => [ "rhn_web_api", "XmlRpcFault" ]
      replace => { "type" => "rhn_web_api" }
    }
  }

  if ("elasticsupport" in [tags]) {
    # host and port are from the elasticsupport system and thus useless
    mutate {
      remove_tag => ["host", "port"]
    }
  }

  if ("rhn_web_api" in [tags]) {
    # Spacewalk rhn_web_api.log

    if ("XmlRpcFault" in [tags]) {
      grok {
        patterns_dir => "logstash"
        patterns_files_glob => "*.pattern"
        match => { "message" => "%{XMLRPCFAULT}" }
      }
    }
    else {

      grok {
        # [2015-04-01 14:17:13,420] INFO  - REQUESTED FROM: 127.0.0.1 CALL: api.getVersion() CALLER: (none) TIME: 0.006 seconds
        # [2015-07-03 11:40:33,378] ERROR - REQUESTED FROM: 10.122.53.112 CALL: proxy.list_available_proxy_channels(<?xml version=\"1.0\"?>
        patterns_dir => "logstash"
        patterns_files_glob => "*.pattern"
        match => { "message" => "\[%{TIMESTAMP:timestamp}\] %{LOGLEVEL:loglevel}\s+- %{CLIENT} %{CALL}( %{CALLER})?( %{DURATION})?" }
        named_captures_only => true
      }
      date {
        # http://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
        target => "@timestamp"
        locale => "en"
      }
    }
  }
  elseif ("access_log" in [tags]) {
    # apache2 access_log

    grok {
      # 10.122.53.112 - - [10/Jul/2016:14:15:12 +0200] "POST /XMLRPC HTTP/1.1" 200 126
      match => { "message" => "%{COMMONAPACHELOG}( %{QUOTEDSTRING:referer})?( %{QUOTEDSTRING:agent})?" }
      named_captures_only => true
    }
    date {
      # 10/Jul/2016:14:15:40 +0200
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
      target => "@timestamp"
      locale => "en"
    }
  }
  elseif ("error_log" in [tags]) {
    # apache2 error_log
    grok {
      match => { "message" => "%{HTTPD_ERRORLOG}" }
    }
    date {
      # [Thu Apr 28 17:55:50 2016]
      match => [ "timestamp" , "EEE MMM dd HH:mm:ss yyyy" ]
      target => "@timestamp"
      locale => "en"
    }
    mutate {
      add_tag => [ "%{loglevel}" ]
    }
  }
  elseif ("osa-dispatcher" in [tags]) {
    # osa-dispatcher.log
    grok {
      # 2015/06/12 11:39:04 +02:00 14117 0.0.0.0: osad/jabber_lib.main('ERROR', 'Error caught:')
      patterns_dir => "logstash"
      patterns_files_glob => "*.pattern"
      match => { "message" => "%{TIMESTAMP:timestamp} %{PID:pid:int} %{IPV4:clientip}: osad/%{FUNCTION:function}(%{ARGS:args})?" }
    }
    date {
      # 2015/06/12 11:39:04 +02:00
      match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss Z" ]
      target => "@timestamp"
      locale => "en"
    }
  }
}
